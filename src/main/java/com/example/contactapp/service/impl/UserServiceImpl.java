package com.example.contactapp.service.impl;

import com.example.contactapp.io.UserRepository;
import com.example.contactapp.io.entity.UserEntity;
import com.example.contactapp.service.UserService;
import com.example.contactapp.shared.Utils;
import com.example.contactapp.shared.dto.UserDto;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;


import java.util.ArrayList;

//this class works with almost all layers of spring. core business logic and data access.
//combines JPA for db operations with security
//works with userDTO to transfer data between service layers and other parts of the application.

@Service  // spring service component
public class UserServiceImpl implements UserService {
    @Autowired
    UserRepository userRepository;
    @Autowired
    Utils utils;
    @Autowired
    BCryptPasswordEncoder bCryptPasswordEncoder;
    @Override
    public UserDto createUser(UserDto userDto) {  //UserDto is a data transfer object used to transfer user data between layers of the application.

        // check wether the user already exist to prevent duplicate records
        UserEntity storedUserDetails = userRepository.findByEmail(userDto.getEmail());
        if (storedUserDetails != null) {
            throw new RuntimeException("Record already exists");
        }

        UserEntity userEntity = new UserEntity();
        BeanUtils.copyProperties(userDto, userEntity);

        String publicUserID = utils.generateUserId(30);
        userEntity.setUserId(publicUserID);
        // temporary setting values that must be generated by us
        userEntity.setEncryptedPassword(bCryptPasswordEncoder.encode(userDto.getPassword()));

        UserEntity storedUser = userRepository.save(userEntity);

        UserDto returnValue = new UserDto();
        BeanUtils.copyProperties(storedUser, returnValue);

        return returnValue;
    }

    @Override
    public UserDto getUser(String email) {
        UserEntity userEntity = userRepository.findByEmail(email);
        if (userEntity == null) {
            throw new UsernameNotFoundException(email);
        }

        UserDto returnValue = new UserDto();
        BeanUtils.copyProperties(userEntity, returnValue);

        return returnValue;
    }

    @Override
    public UserDto getUserByUserId(String id) {
        UserDto returnValueDto = new UserDto();
        UserEntity userEntity= userRepository.findByUserId(id);

        if(userEntity== null){
            throw new UsernameNotFoundException(id);

        }
        BeanUtils.copyProperties(userEntity,returnValueDto);
        return returnValueDto;

    }

    @Override
    public UserDto updateUser(String id, UserDto userDto) {
        UserDto returnValue = new UserDto();
       // UserEntity updatedUser= new UserEntity();

        UserEntity existingUser= userRepository.findByUserId(id);
        if(existingUser==null){
            throw new UsernameNotFoundException(userDto.getUserId());
        }
        existingUser.setFirstName(userDto.getFirstName());
        existingUser.setLastName(userDto.getLastName());
        existingUser.setEncryptedPassword("TEST PASSWORD");
        UserEntity updatedUser = userRepository.save(existingUser);
        BeanUtils.copyProperties(updatedUser, returnValue);

        return returnValue;

    }

    @Override
    public void deletUser(String id) {
        UserEntity userEntity= userRepository.findByUserId(id);
        if (userEntity==null){
            throw new UsernameNotFoundException(id);

        }
        userRepository.delete(userEntity);
    }

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        UserEntity userEntity = userRepository.findByEmail(username);

        if (userEntity == null) {
            throw new UsernameNotFoundException(username);
        }

        return new User(username, userEntity.getEncryptedPassword(), new ArrayList<>());
    }
}

